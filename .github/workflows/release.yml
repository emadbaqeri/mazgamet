name: Release

on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+*"
  workflow_dispatch:
    inputs:
      version:
        description: 'Version to release (e.g., 0.1.0)'
        required: true
        type: string

jobs:
  create-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set release version (from tag)
        if: github.event_name == 'push'
        run: echo "RELEASE_VERSION=${GITHUB_REF#refs/tags/v}" >> $GITHUB_ENV

      - name: Set release version (from input)
        if: github.event_name == 'workflow_dispatch'
        run: echo "RELEASE_VERSION=${{ github.event.inputs.version }}" >> $GITHUB_ENV

      - name: Generate changelog
        id: changelog
        run: |
          # Extract and format changelog from CHANGELOG.md
          if [ -f CHANGELOG.md ]; then
            # Check if there's a section for the current version
            if grep -q "## v$RELEASE_VERSION" CHANGELOG.md; then
              echo "changelog<<EOF" >> $GITHUB_OUTPUT
              # Extract the section for the current version
              sed -n "/## v$RELEASE_VERSION/,/## v/p" CHANGELOG.md | sed '1p;/## v[0-9]/d' >> $GITHUB_OUTPUT
              echo "EOF" >> $GITHUB_OUTPUT
              echo "::notice::Found changelog section for v$RELEASE_VERSION"
            else
              echo "::warning::No changelog section found for v$RELEASE_VERSION"
              echo "changelog=Release v$RELEASE_VERSION" >> $GITHUB_OUTPUT
            fi
          else
            echo "::warning::No CHANGELOG.md file found"
            echo "changelog=Release v$RELEASE_VERSION" >> $GITHUB_OUTPUT
          fi
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          name: Release v${{ env.RELEASE_VERSION }}
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: false
          token: ${{ secrets.GITHUB_TOKEN }}
          tag_name: v${{ env.RELEASE_VERSION }}
          generate_release_notes: true

  publish-crates:
    name: Publish to crates.io
    runs-on: ubuntu-latest
    needs: create-release
    steps:
      - uses: actions/checkout@v4
      - uses: dtolnay/rust-toolchain@stable
      - uses: Swatinem/rust-cache@v2

      - name: Check version consistency
        run: |
          if [ "${{ github.event_name }}" = "push" ]; then
            VERSION=${GITHUB_REF#refs/tags/v}
          else
            VERSION=${{ github.event.inputs.version }}
          fi
          
          echo "::notice::Checking version consistency for v$VERSION"
          
          # Check if workspace version matches tag version
          if grep -q '\[workspace\.package\]' mazgamet/Cargo.toml; then
            WORKSPACE_VERSION=$(grep -A10 '\[workspace\.package\]' mazgamet/Cargo.toml | grep -oP 'version = "\K[^"]+' | head -1 || echo "NOT_FOUND")
            if [ "$WORKSPACE_VERSION" = "NOT_FOUND" ]; then
              echo "::warning::Could not find version in workspace.package section"
            elif [ "$WORKSPACE_VERSION" != "$VERSION" ]; then
              echo "::warning::Tag version ($VERSION) doesn't match workspace version ($WORKSPACE_VERSION)"
              echo "::notice::Updating workspace version to match tag version"
              sed -i "s/version = \"$WORKSPACE_VERSION\"/version = \"$VERSION\"/" mazgamet/Cargo.toml
            else
              echo "::notice::Workspace version matches: $WORKSPACE_VERSION"
            fi
          else
            echo "::warning::No [workspace.package] section found, skipping workspace version check"
          fi
          
          # Check and update all crate versions match
          for toml in $(find . -name Cargo.toml -not -path "*/target/*"); do
            if grep -q '\[package\]' "$toml"; then
              CRATE_VERSION=$(grep -oP 'version = "\K[^"]+' "$toml" | head -1 || echo "NOT_FOUND")
              if [ "$CRATE_VERSION" = "NOT_FOUND" ]; then
                echo "::warning::Could not find version in $toml"
                continue
              fi
              if [ "$CRATE_VERSION" != "$VERSION" ]; then
                echo "::warning::Crate version in $toml ($CRATE_VERSION) doesn't match expected version ($VERSION)"
                echo "::notice::Updating crate version in $toml to match tag version"
                sed -i "s/version = \"$CRATE_VERSION\"/version = \"$VERSION\"/" "$toml"
              else
                echo "::notice::Crate version matches in $toml: $CRATE_VERSION"
              fi
            fi
          done

      - name: Commit version updates if needed
        run: |
          if git diff --quiet; then
            echo "::notice::No version updates needed"
          else
            echo "::notice::Committing version updates"
            git config --local user.email "github-actions[bot]@users.noreply.github.com"
            git config --local user.name "github-actions[bot]"
            git add .
            git commit -m "chore: align versions for release [skip ci]"
            git push || echo "::warning::Failed to push version updates"
          fi

      - name: Dry run publish
        run: |
          echo "::group::Validating cargo package"
          cd mazgamet/lexer && cargo package --allow-dirty
          echo "::endgroup::"

      - name: Publish crates
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}
        run: |
          # First publish any crates that are depended on by other crates
          echo "::group::Publishing lexer crate"
          cd mazgamet/lexer && cargo publish --allow-dirty || { echo "::error::Failed to publish lexer crate"; exit 1; }
          echo "::endgroup::"
          
          echo "::notice::Waiting for crates.io to index the published crates..."
          sleep 30
          
          echo "::notice::Successfully published all crates!"