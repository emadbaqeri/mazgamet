name: Release
permissions:
  contents: write
  id-token: write
on:
  push:
    tags:
      - "v[0-9]+.[0-9]+.[0-9]+*"
  workflow_dispatch:
    inputs:
      tag:
        description: "Git tag to release (e.g., v0.1.0)"
        required: true
        type: string
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false
jobs:
  create-gh-release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    outputs:
      release_tag: ${{ steps.vars.outputs.tag }}
      release_version: ${{ steps.vars.outputs.version }}
      changelog_content: ${{ steps.changelog_builder.outputs.changelog }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      - name: Set release version variables
        id: vars
        run: |
          set -euo pipefail
          if [[ "${{ github.event_name }}" == "push" ]]; then
            TAG_NAME="${GITHUB_REF#refs/tags/}"
          else
            TAG_NAME="${{ github.event.inputs.tag }}"
            if [[ ! "$TAG_NAME" =~ ^v ]]; then
              TAG_NAME="v$TAG_NAME"
            fi
          fi
          VERSION="${TAG_NAME#v}"
          echo "tag=$TAG_NAME" >> $GITHUB_OUTPUT
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "::notice::Preparing release for tag: $TAG_NAME (Version: $VERSION)"
        shell: bash
      - name: Generate Changelog Content using Builder Action
        id: changelog_builder
        uses: mikepenz/release-changelog-builder-action@v4
        with:
          configuration: ".github/changelog-config.json"
          ignorePreReleases: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.vars.outputs.tag }}
          name: Release ${{ steps.vars.outputs.tag }}
          body: ${{ steps.changelog_builder.outputs.changelog }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  publish-crates:
    name: Publish to crates.io
    runs-on: ubuntu-latest
    needs: create-gh-release
    # Fix: Use a proper if condition to check for token availability at runtime
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.create-gh-release.outputs.release_tag }}
      - name: Install Rust stable toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: "1.86.0"
      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
      - name: Install jq
        run: sudo apt-get update && sudo apt-get install -y jq
      - name: Verify crate versions match tag
        run: |
          set -euo pipefail
          EXPECTED_VERSION="${{ needs.create-gh-release.outputs.release_version }}"
          echo "::notice::Verifying crate versions match tag version: $EXPECTED_VERSION"
          cargo metadata --format-version 1 --no-deps | jq -r --arg VERSION "$EXPECTED_VERSION" '
            .packages[] |
            select(.publish != false) |
            select(.version != $VERSION) |
            "Error: Crate \(.name) version \(.version) does not match expected release version \($VERSION)"
          ' > version_errors.txt || true
          if [ -s version_errors.txt ]; then
            cat version_errors.txt
            exit 1
          else
            echo "::notice::All publishable crate versions match $EXPECTED_VERSION."
          fi
        shell: bash
      - name: Check if CRATES_IO_TOKEN exists
        id: check_token
        run: |
          if [ -n "${{ secrets.CRATES_IO_TOKEN }}" ]; then
            echo "has_token=true" >> $GITHUB_OUTPUT
          else
            echo "has_token=false" >> $GITHUB_OUTPUT
            echo "::warning::CRATES_IO_TOKEN is not set. Skipping crate publishing."
          fi
        shell: bash
      - name: Publish crates to crates.io
        if: steps.check_token.outputs.has_token == 'true'
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}
        run: |
          set -euo pipefail
          cargo publish --workspace --locked --token "${CARGO_REGISTRY_TOKEN}" || \
            { echo "::error::Failed to publish crates using --workspace"; exit 1; }
          echo "::notice::Successfully published crates for version ${{ needs.create-gh-release.outputs.release_version }}!"
        shell: bash
