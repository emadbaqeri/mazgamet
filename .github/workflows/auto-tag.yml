# file: auto-tag.yml
name: Auto-Tag on Main

permissions:
  contents: write # Needed to commit version bumps and push tags

on:
  push:
    branches:
      - main
  workflow_dispatch:
    inputs:
      version_increment:
        description: "Manual version increment type (patch, minor, major)"
        required: false # Make optional, auto-detect otherwise
        type: choice
        options:
          - patch
          - minor
          - major

# Cancel redundant runs, but allow manual dispatch to run
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}-${{ github.event_name != 'workflow_dispatch' || github.run_id }}
  cancel-in-progress: ${{ github.event_name != 'workflow_dispatch' }}

jobs:
  auto-tag:
    name: Auto-Tag Latest Commit
    runs-on: ubuntu-latest
    # Don't run if the push was for a tag
    if: ${{ !startsWith(github.ref, 'refs/tags/') }}
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Required for tag history
          token: ${{ secrets.GITHUB_TOKEN }} # Use provided token for writes

      - name: Set Git User
        run: |
          git config --local user.email "github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"

      - name: Get latest tag
        id: latest_tag
        run: |
          set -euo pipefail
          # Get the latest semantic version tag, defaulting to v0.0.0 if none exists
          # This regex tries to find the highest vX.Y.Z tag
          LATEST_TAG=$(git tag -l 'v[0-9]*.[0-9]*.[0-9]*' --sort=-version:refname | head -n 1)
          if [ -z "$LATEST_TAG" ]; then
            LATEST_TAG="v0.0.0"
            echo "::notice::No previous SemVer tags found. Using $LATEST_TAG as base."
          else
             echo "::notice::Latest SemVer tag is $LATEST_TAG"
          fi
          echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT
        shell: bash

      - name: Determine version increment type
        id: increment_type
        run: |
          set -euo pipefail
          INCREMENT_TYPE="patch" # Default
          if [[ "${{ github.event_name }}" == "workflow_dispatch" && "${{ github.event.inputs.version_increment }}" != "" ]]; then
            INCREMENT_TYPE="${{ github.event.inputs.version_increment }}"
            echo "::notice::Using manual increment type: $INCREMENT_TYPE"
          else
            # Check if LATEST_TAG is valid before running git log
            if [ "${{ steps.latest_tag.outputs.latest_tag }}" == "v0.0.0" ]; then
              echo "::notice::No previous tags found. Defaulting increment type to patch."
            else
              # Auto-detect based on conventional commits since last tag
              # Use --format=%B to get the full commit message body for BREAKING CHANGE check
              COMMITS=$(git log ${{ steps.latest_tag.outputs.latest_tag }}..HEAD --format=%B)
              if echo "$COMMITS" | grep -qE '^BREAKING CHANGE:|^break:'; then
                INCREMENT_TYPE="major"
              elif echo "$COMMITS" | grep -qE '^feat:'; then
                INCREMENT_TYPE="minor"
              fi
              echo "::notice::Detected increment type from commits: $INCREMENT_TYPE"
            fi
          fi
          echo "increment=$INCREMENT_TYPE" >> $GITHUB_OUTPUT
        shell: bash

      # --- RUST-BASED SEMVER CALCULATION ---
      - name: Install Rust stable toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          toolchain: "1.86.0"

      - name: Install Rust semver-tool
        run: |
          set -euo pipefail
          if ! command -v semver-tool >/dev/null 2>&1; then
            cargo install semver-tool --locked
          else
            echo "semver-tool already installed"
          fi
        shell: bash

      - name: Calculate new version using semver-tool
        id: new_version
        run: |
          set -euo pipefail
          LATEST_TAG_VERSION="${{ steps.latest_tag.outputs.latest_tag }}"
          # Remove 'v' prefix
          LATEST_VERSION_NUM=${LATEST_TAG_VERSION#v}
          INCREMENT="${{ steps.increment_type.outputs.increment }}"

          # Ensure LATEST_VERSION_NUM is a valid semantic version
          if ! echo "$LATEST_VERSION_NUM" | grep -qE '^[0-9]+\.[0-9]+\.[0-9]+$'; then
            echo "::error::Invalid semantic version format for base version: '$LATEST_VERSION_NUM'"
            exit 1
          fi

          # Ensure INCREMENT is one of the valid options
          if ! echo "$INCREMENT" | grep -qE '^(patch|minor|major)$'; then
            echo "::error::Invalid increment type: '$INCREMENT'. Must be 'patch', 'minor', or 'major'."
            exit 1
          fi

          NEW_VERSION=$(semver-tool bump "$INCREMENT" "$LATEST_VERSION_NUM")
          if [ -z "$NEW_VERSION" ]; then
            echo "::error::semver-tool failed to bump version '$LATEST_VERSION_NUM' with increment '$INCREMENT'"
            exit 1
          fi

          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "new_tag=v$NEW_VERSION" >> $GITHUB_OUTPUT
          echo "::notice::Calculated new version: $NEW_VERSION (Tag: v$NEW_VERSION)"
        shell: bash
      # --- END RUST-BASED SEMVER ---
      - name: Check if tag already exists
        id: check_tag_exists
        run: |
          set -euo pipefail
          NEW_TAG="${{ steps.new_version.outputs.new_tag }}"
          if git rev-parse "$NEW_TAG" >/dev/null 2>&1; then
            echo "exists=true" >> $GITHUB_OUTPUT
            echo "::warning::Tag $NEW_TAG already exists. Skipping version bump and tag creation."
          else
            echo "exists=false" >> $GITHUB_OUTPUT
          fi
        shell: bash

      - name: Update version in Cargo.toml files
        if: steps.check_tag_exists.outputs.exists == 'false'
        run: |
          set -euo pipefail
          NEW_VERSION="${{ steps.new_version.outputs.new_version }}"
          if ! command -v cargo-set-version >/dev/null 2>&1; then
            cargo install cargo-edit --locked
          fi
          # Use cargo-edit (if available) or sed to update versions
          # Installing cargo-edit specifically for this:
          echo "Attempting to set version using cargo set-version..."
          if cargo set-version --workspace "$NEW_VERSION"; then
             echo "::notice::Successfully set version for workspace members using 'cargo set-version --workspace'."
          else
             echo "::warning::'cargo set-version --workspace' failed or no workspace members found inheriting version. Falling back to manual sed."
             # Fallback/alternative: Manual find and sed (handle workspace.package too)
             find . -path ./target -prune -o -name Cargo.toml -print | while read -r toml; do
               if grep -q '^version\s*=\s*\"[^\"]*\"' "$toml" && ! grep -q '\[workspace\]' "$toml"; then # Avoid top-level workspace file here
                 sed -i -E "s/^version\s*=\s*\"[^\"]*\"/version = \"$NEW_VERSION\"/" "$toml"
                 echo "::notice::Updated version in $toml to $NEW_VERSION (using sed)"
               fi
               # Handle workspace.package definition
               if grep -q '\[workspace\.package\]' "$toml" && grep -A5 '\[workspace\.package\]' "$toml" | grep -q '^version\s*='; then
                 sed -i "/\[workspace\.package\]/,/version\s*=/ s/^version\s*=\s*\"[^\"]*\"/version = \"$NEW_VERSION\"/" "$toml"
                 echo "::notice::Updated workspace package version in $toml to $NEW_VERSION (using sed)"
               fi
             done
          fi
        shell: bash

      - name: Commit version updates
        if: steps.check_tag_exists.outputs.exists == 'false'
        run: |
          set -euo pipefail
          NEW_VERSION="${{ steps.new_version.outputs.new_version }}"
          # Check if Git status reports changes
          if git diff --quiet && git diff --staged --quiet; then
            echo "::notice::No version changes to commit."
          else
            git add . # Add all changes (like updated Cargo.toml files)
            git commit -m "chore: bump version to $NEW_VERSION [skip ci]"
            git push
            echo "::notice::Committed and pushed version updates"
          fi
        shell: bash

      - name: Create and push tag
        if: steps.check_tag_exists.outputs.exists == 'false'
        run: |
          set -euo pipefail
          NEW_TAG="${{ steps.new_version.outputs.new_tag }}"
          git tag "$NEW_TAG" -m "Release $NEW_TAG"
          git push origin "$NEW_TAG"
          echo "::notice::Created and pushed tag $NEW_TAG"
        shell: bash
